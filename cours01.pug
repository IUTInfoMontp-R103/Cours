extends coursXX.pug

append preamble
  - date = "2023-10-23";
  - title = "Cours n°1 :<br>Représentations";

append header
  script(src="https://polyfill.io/v3/polyfill.min.js?features=es6")
  script(id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js")

block document
  section

    h1 Présentation du cours
    p 1h cours (7 semaines) + 3h TD (6 semaines)
    br
    p Contenu :
    ul
      li Encodages et représentations
      li Représentations des nombres
        ul
          li Écriture positionnelle en base quelconque
          li Représentation des nombres relatifs
          li Nombres à virgule flottante (IEEE 754)
      li Logique booléenne et circuits
        ul
          li Opérateurs
          li Circuits
          li Additionneurs, UAL, etc.
      li Peut-être un peu d'assembleur si assez de temps...

  section
    h1 Représentation de valeurs
    .box
      .box-title Définition
      .box-content
        p Un <em>bit</em> (<em>binary digit</em>) est une unité d'information qui représente un état logique pouvant prendre deux valeurs (souvent notées \(0\) et \(1\)).

    .uncover
      .box
        .box-title Proposition
        .box-content Avec \(n\) bits, on peut représenter <span class="uncover">\(2^n\)</span> valeurs différentes
      ul.uncover(data-start="+0")
        li 1 bit : \(0\), \(1\)
        li 2 bits : \(00\), \(01\), \(10\), \(11\)
        li 3 bits : \(000\), \(001\), \(010\), \(011\), \(100\), \(101\), \(110\), \(111\)

    .uncover
      .box
        .box-title Proposition
        .box-content Pour représenter \(k\) valeurs distinctes, il faut utiliser au moins <span class="uncover">\(\lceil \log_2(k)\rceil\)</span> bits
      ul.uncover(data-start="+0")
        li 6 valeurs : \(log_2(6) \simeq 2,59\) &rarr; 3 bits
        li 8 valeurs : \(log_2(8) = 3\) &rarr; 3 bits
        li 9 valeurs : \(log_2(9) \simeq 3,17\) &rarr; 4 bits

  section
    h1 ASCII
    .side
      .center
        img(data-step=0 src="cours01/us-ascii.png" style={width: "100%"})
    .side
      p <em>American Standard Code for Information Interchange</em>
      br
      ul
        li Représentation des caractères (pour l'anglais) sur 7 bits
        li Développée dans les années 1960, révisée jusqu'en 1986

  section
    h1 ASCII
    .side
      center
        img(src="cours01/latin1-ascii.gif" style={width: "100%"})
    .side
      p La table a depuis été étendue de différentes manières pour ajouter des caractères supplémentaires
      br
      ul
        li Ce sont les versions ISO 8859-1 (latin1) et ISO 8859-15 (latin9) qui correspondent le mieux au français

  section
    h1 Octet
    .side
      p En pratique on considère les bits par groupes de 8 :
      ul
        li 1 octet = 8 bits = 256 valeurs
        li La mémoire des ordinateurs est <em>adressée</em> par octets (chaque octet a un numéro qui est son <em> adresse</em>)
        li Les octets peuvent être interprétés comme une valeur entre 0 et 255
    .side
      p Pour les grandes valeurs, on utilise des unités multiples de l'octet
      br
      .only(data-step="+0")
        p Historiquement :
        ul
          li 1 kilooctet (ko) = 1024 o
          li 1 mégaoctet (Mo) = 1024 ko
          li 1 gigaoctet (Go) = 1024 Mo
          li ...
      .only
        p Depuis 1998 :
        ul
          li 1 kilooctet (ko) = 1000 o
          li 1 mégaoctet (Mo) = 1000 ko
          li 1 gigaoctet (Go) = 1000 Mo
          li ...
      .uncover(data-start="+0")
        ul
          li 1 kibioctet (kio) = 1024 o
          li 1 mébioctet (Mio) = 1024 kio
          li 1 gibioctet (Gio) = 1024 Mio
          li ...

  section
    h1 Texte
    .side
      p Si l'alphabet est simple, on peut utiliser un format ASCII (p.ex. <em>ISO-latin-9</em> pour le français)
      ul
        li 1 octet par caractère
      br
      .only.center(data-step="+0" style={height: "40%"})
        img(src="cours01/hello.png" style={width: "80%"})
      .only(data-start="+1" style={height: "40%"})
        p Si on veut utiliser un alphabet plus large, on peut utiliser l'<em>Unicode</em>
        ul
          li 143859 caractères
          li 154 systèmes d'écriture (modernes et historiques)
          li symboles divers (emoji, musique, etc.)
    .side
      .uncover
        p Il existe plusieurs encodages <em>Unicode</em> :
        br
        div(style={height: "12em"})
          .only(data-step="+0")
            ul
              li UTF-8
                ul
                  li 1 à 4 octets par caractère
                  li <code>0xxxxxxx</code>
                  li <code>110xxxxx	10xxxxxx</code>
                  li <code>1110xxxx	10xxxxxx	10xxxxxx</code>
                  li <code>11110xxx	10xxxxxx	10xxxxxx	10xxxxxx</code>
                  li Compatible ASCII
                  li Environ 97% des pages web actuelles
          .only
            ul
              li UTF-16
                ul
                  li 2 ou 4 octets par caractère
                  li Non compatible ASCII
                  li Utilisé en interne par Windows et Java
          .only(data-start="+1")
            ul
              li UTF-32
                ul
                  li Taille fixe de 4 octets par caractère
            br
            .uncover(data-start="+1")
              p <strong>Attention !</strong> L'encodage doit être connu pour éviter les problèmes
              img(src="cours01/encodage.png")

  section
    h1 Images
    .side
      img(src="cours01/images.png")
    .side
      p Pour représenter une image, on peut décrire chacun de ses <em>pixels</em>
      br
      .uncover
        p Pour une image en couleurs de \(n \times m\) pixels :
        ul
          li \(n \times m\) pixels
          li 3 composantes par pixel (RGB)
          li 1 octet pour chaque composante (0 à 255)
      .uncover
        p &rarr; \(3\times n\times m\) octets pour représenter l'image
        p (3 Mo pour une image 1000x1000)
  section
    h1 Audio
    .side
      .only(data-step="0")
        img(src="cours01/wave.png")
      .only(data-start="+1")
        img(src="cours01/wave2.png")
        .footnote Source : <a href="https://www.izotope.com/en/learn/digital-audio-basics-sample-rate-and-bit-depth.html">Digital Audio Basics: Audio Sample Rate and Bit Depth</a>
    .side
      .only(data-start="0" data-end="1")
        p Pour représenter une fonction continue (p.ex. piste audio)
        ul
          li Un ou plusieurs canaux indépendants (<em>mono</em>: 1 canal, <em>stereo</em>: 2 canaux)
          li Mesures régulières au cours du temps (échantillons) &rarr; taux d'échantillonage en <em>Hertz</em>
          li Taille fixée pour les échantillons (<em>bit depth</em>) &rarr; nombre fini de valeurs possibles
      .only(data-start="+2")
        p Taille d'un fichier audio (en octets) :
        ul
          li taille d'un échantillon (en octets)
          li taux d'échantillonage (en Hz)
          li durée (en secondes)
          li nombre de canaux
        br
        .uncover
          p Environ 10Mo par minute pour un fichier <em>wave</em> en stereo, 44.1 kHz, 16 bits par échantillon.

  section
    h1 Audio
    .side
      img(src="cours01/nyquist.png")
      .footnote Source : <a href="https://www.izotope.com/en/learn/digital-audio-basics-sample-rate-and-bit-depth.html">Digital Audio Basics: Audio Sample Rate and Bit Depth</a>
    .side
      .only(data-step="+0")
        p Un signal audio peut être décomposé en une superposition de signaux sinusoïdaux
        br
        ul
          li Pour reconstruire une sinusoide&nbsp;: au moins 2 mesures par période
          li Pour enregistrer une fréquence de \(f\) Hz&nbsp;: au moins \(2f\) Hz d'échantillonage
      .only
        p On considère que l'oreille humaine perçoit les fréquences jusqu'à 20 kHz
        br
        p &rarr; Un échantillonage de 44.1 kHz permet d'enregistrer les fréquences audibles

  section
    h1 Compression
    ul
      li Nombre d'images RGB de \(n\times m\) pixels : \(\left(256^3\right)^{n\times m}\)
      li Nombre de bits nécessaires : \(log_2\left((256^3)^{n\times m}\right) = 8\times 3\times n\times m\)
    p &rarr; Il faut au moins \(3\times n\times m\) octets

    .box.uncover
      .box-title Idée 1
      .box-content Les images qui nous intéressent sont très différentes des images "aléatoires" (beaucoup de régularités)

    .box.uncover
      .box-title Idée 2
      .box-content Si on représente une image différente mais proche de l'image de départ, ça ne fait presque aucune différence

  section
    h1 Compression de Huffman
    .side
      img.only(data-step="0" src="cours01/huffman1.png")
      img.only(data-end="2" src="cours01/huffman2.png")
      .center.uncover
        div \(\operatorname{a\ b\ a\ c\ b\ f\ a\ a\ d\ a\ e}\)
        div &downarrow;
        div \(0.100.0.101.100.1111.0.0.110.0.1110\)
        div &downarrow;
        div \(0100010110011110011001110\)
    .side
      p Si toutes les valeurs n'ont pas la même fréquence on peut représenter les plus fréquentes sur moins de bits
      ul
        li construction d'un arbre par le bas en regroupant les symboles les moins fréquents
        li.uncover(data-start="1") on obtient un "code préfixe" de taille variable
      p.uncover(data-start="+0") &rarr; Longueur moyenne d'un message est plus petite qu'avec un code de taille fixe

  section
    h1 Compression
    .side(style={"justify-content": "flex-start"})
      h3 Sans pertes (<em>lossless</em>)
      ul
        li permet de retrouver les données exactes d'entrées
        li exploite des régularités attendues dans les données
        li ex: PNG (images), GIF (images, limité à 256 couleurs), FLAC (audio), ZIP (générique)
    .side(style={"justify-content": "flex-start"})
      h3 Avec pertes (<em>lossy</em>)
      ul
        li encode des données proches des données d'entrée
        li ex: JPG (images), MP3 (audio), H.264 (vidéo)
