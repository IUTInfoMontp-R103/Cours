extends coursXX.pug

append preamble
    - date = "2022-11-14";
    - title = "Cours n°3 :<br>Nombres négatifs";

append header
  script(src="https://polyfill.io/v3/polyfill.min.js?features=es6")
  script(id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js")
  .no-display
    | \(
    | \newcommand{\llbracket}{[\![}
    | \newcommand{\rrbracket}{]\!]}
    | \)

block document
  section
    h1 Problématique
    .side
      p Nous avons vu comment représenter des nombres entiers positifs en base 2
      br
      ul
        li.uncover Habituellement on marque les nombres négatifs avec un signe "-" (ex : -12)
        li.uncover Dans la machine, il faut encoder le signe comme le reste avec des bits
        li.uncover Il faut encoder
          ul
            li Le signe
            li La magnitude (valeur absolue)
    .side
      .uncover
        p Nous allons voir 4 représentations :
        ul
          li Signe-magnitude
          li Complément à 1
          li Complément à 2
          li Représentation biaisée
        br
        p <strong>Rmq :</strong> nombre de bits fixé

  .section-counter
  section.section
    h1 Signe-magnitude

  section
    h1 Signe-magnitude
    .side
      img(src="cours03/signe-magnitude.png")
    .side
      ul
        li Premier bit représente le signe
          ul
            li 0 : positif
            li 1 : négatif
        li Valeur binaire des bits restants donne la magnitude
      br
      p.uncover &rarr; On peut représenter les valeurs de \(\llbracket -2^{n-1}+1, 2^{n-1}-1\rrbracket \)

  section
    h1 Calculs
    p Opérations :
    ul
      li Calculs sur les magnitudes
      li Addition / soustraction : opération en fonction des bits de signe
      li Multiplication : signe en fonction des bits de signe

  section
    h1 Bilan
    ul
      li Facile à définir
      li Facile à interpréter (pour un humains)
      li Coïncide avec notation non-signée sur les positifs
      li Facile de trouver le signe d'un nombre
    br
    ul
      li Addition compliquée
      li Sens croissant inversé pour les négatifs
      li Deux zéros (+0 et -0)

  .section-counter
  section.section
    h1 Complément à 1

  section
    h1 Complémentation à 1
    .box
      .box-title Définition
      .box-content
        p Le <em>complément à un</em> d'une suite de bits est obtenue en remplaçant tous les 0 en 1 et les 1 en 0 (\(i \mapsto 1 - i\))

    .uncover
      p Ex :
      .center
        img(src="cours03/complement-1.png" style={width: '40%'})

  section
    h1 Complément à 1
    .side
      img(src="cours03/complement-1-ex.png")
    .side
      ul
        li Nombres positifs représentés comme non-signés
        li Nombres négatifs représentés par complément à 1 de leur opposé
      br
      ul.uncover
        li Plus grande valeur positive :
          p \(0111... = 2^{n-1}-1\)
        li Plus petite valeur négative :
          p \(1000... = -2^{n-1}+1\)

  section
    h1 Évaluation
    .side
      .image-container.only(data-start=0 data-end=4)
        img(src="cours03/comp-1-decode-1.png")
        img.uncover(src="cours03/comp-1-decode-2.png")
        img.uncover(src="cours03/comp-1-decode-3.png")
        img.uncover(src="cours03/comp-1-decode-4.png")
        img.uncover(src="cours03/comp-1-decode-5.png")
      .image-container.only(data-start=5)
        img(src="cours03/compl-1-proof-1.png")
        img.uncover(src="cours03/compl-1-proof-2.png")
        img.uncover(src="cours03/compl-1-proof-3.png")
    .side
      p Nombres positifs :
      ul
        li Commencent par 0
        li Évalués comme non-signés
      br
      .uncover(data-start=1)
        p Nombres négatifs :
        ul
          li Commencent par 1
          li Complément à 1 puis évaluation de l'opposé
      .uncover(data-start=5)
        p ou
        ul
          li Évaluation non-signé \(- 2^n + 1\)

  section
    h1 Opérations (1)
    .side
      .center
        img.only(data-step=0 src="cours03/compl-1-add.png" style={width: "80%"})
        img.only(src="cours03/compl-1-sub.png" style={width: "80%"})
    .side
      p Addition / soustraction :
      ul
        li On effectue l'opération comme sur les entiers non signés
        li Les retenues sortantes (au-delà du bit de poids fort) sont réinsérées au bit de poids faible

  section
    h1 Opérations (2)
    .side
      .center
        img(src="cours03/compl-1-mult.png" style={width: "100%"})
    .side
      p Multiplication :
      ul
        li On effectue l'opération comme sur les entiers non signés
        li Tous les chiffres qui dépassent du bit de poids faible sont réinsérées du côté des bits de poids faible

  section
    h1 Bilan
    ul
      li Conversion \(x\rightarrow -x\) facile pour un ordinateur
      li Coïncide avec notation non-signée sur les positifs
      li Facile de trouver le signe d'un nombre
    br
    ul
      li Opérations uniformes (mais problème de retenues)
      li Deux zéros (+0 et -0)

  .section-counter
  section.section
    h1 Complément à 2

  section
    h1 Complément à 2
    .side
      .image-container
        img(src="cours03/comp-2-1.png")
        img.uncover(src="cours03/comp-2-2.png")
        img.uncover(src="cours03/comp-2-3.png")
    .side
      p En réalité : complément à \(2^n\)
      br
      p Représentation de \(x\) :
      ul
        li Si \(x \geq 0\), représenté comme non signé
        li.uncover(data-start=1) Si \(x < 0\), représenté comme \((x + 2^n)\) non signé
      br
      p.uncover(data-start=3) &rarr; Pour \(x\geq 0\), représentation de \(-x\) = représentation non signée de \(2^n-x\)
      .box.uncover
        .box-title Prop
        .box-content
          p Pour tout \(x\in \llbracket -2^{n-1}, 2^{n-1}-1\rrbracket \),
          p \(x\) est représenté comme un entier non signé \(y\) avec \(x \equiv y\ [2^n]\)

  section
    h1 Conversion
    .side
      .image-container
        img(src="cours03/comp-2-oppose-1.png")
        img(src="cours03/comp-2-oppose-2.png")
        img.uncover(src="cours03/comp-2-oppose-3.png")
        img.uncover(src="cours03/comp-2-oppose-4.png")
        img.uncover(src="cours03/comp-2-oppose-5.png")
    .side
      p Pour représenter \(-x\) :
      ul
        li Représentation de \(x\)
        li.uncover(data-start=1) Complément à 1
        li.uncover Ajouter 1
      .uncover(data-start=3)
        p ou
        ul
          li Complément à 1 des bits à gauche du 1 le plus à droite

  section
    h1 Décodage
    .side
      .image-container
        img.uncover(data-start=1 src="cours03/comp-2-decode-1.png")
        img.uncover(src="cours03/comp-2-decode-2.png")
        img.uncover(src="cours03/comp-2-decode-3.png")
        img.uncover(src="cours03/comp-2-decode-4.png")

    .side
      p Signe :
      ul
        li \(x \geq 0\) si bit de poids fort 0
        li \(x < 0\) si bit de poids fort 1

      br
      .uncover(data-start=1)
        p Valeur :
        ul
          li Si positif, décoder comme non signé
          li Si négatif,
            ul
              li convertir en \(-x\) et décoder
              li.uncover(data-start=4) ou décoder comme non signé avec bit de poids fort à \(-2^{n-1}\)

  section
    h1 Opérations
    .side
      img.only(data-start=2 data-end=2 src="cours03/comp-2-add.png")
      img.only(data-start=3 src="cours03/comp-2-mult.png")

    .side
      .box
        .box-title Prop
        .box-content
          p Pour tout \(x\in \llbracket -2^{n-1}, 2^{n-1}-1\rrbracket \),
          p \(x\) est représenté comme un entier non signé \(y\) avec \(x \equiv y\ [2^n]\)

      ul
        li.uncover(data-start=1) Opérations comme sur des représentations non signées, modulo \(2^n\)
        li.uncover Addition / soustraction : résultat correct si signe comme attendu (toujours correct si ajout de signes opposés)

  section
    h1 Bilan
    ul
      li Coïncide avec notation non-signée sur les positifs
      li Facile de trouver le signe d'un nombre
      li Opérations très simples (attention <em>overflow</em>)
      li Un seul zéro
      li Sens croissant est conservé (mais saut de \((2^{n-1} - 1)\) à \((-2^{n-1})\))
    br
    ul
      li Moins naturel à interpréter

  .section-counter
  section.section
    h1 Représentation biaisée

  section
    h1 Représentation biaisée
    ul
      li Sur \(n\) bits on peut représenter \(2^n\) valeurs distinctes
      li.uncover On décale l'intervalle \(\llbracket 0, 2^n-1\rrbracket\) sur \(\llbracket -2^{n-1} - 1, 2^{n-1}\rrbracket\)
      li.uncover On utilise un <em>biais</em> qu'on ajoute à chaque valeur à représenter (<em>biais</em> = \(2^{n-1} - 1\))

    br
    p Sur 8 bits :
    ul
      li 0 &rarr; 126 : valeurs négatives
      li 127 : zéro
      li 128 &rarr; 255 : valeurs positives

  section
    h1 Bilan
    ul
      li Définition simple
      li Un seul zéro
      li Sens croissant est conservé
    br
    ul
      li Moins naturel à interpréter
      li Opérations plus compliquées (il faut soustraire ou ajouter le biais à chaque fois)